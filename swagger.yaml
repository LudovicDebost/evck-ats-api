<<<<<<< HEAD
openapi: 3.0.0
info:
  title: EveryCheck ATS
  description: This API allows integration with Applicant Tracking Systems (ATS) to manage job applications, retrieve assessment records, and download related documents.
  version: 1.0.0
  contact:
    email: contact@everycheck.fr
components:
  securitySchemes:
    SSOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
  schemas:
    Assessment:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: 6a60093f-87f5-48b6-b82b-3fe308e26f4e
        date:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - created
            - client_sealed
            - applicant_sealed
            - check_finished
            - check_canceled
          description: |
            Enum to represent the status of a job application.
            Possible values:
            - `created`: The application has been received but not yet started.
            - `client_sealed`: The application is started, waiting for applicant filling.
            - `applicant_sealed`: The candidate has filled the forms.
            - `check_finished`: The application's checks have been completed.
            - `check_canceled`: The application's checks have been canceled.
        link:
          type: string
          format: uri
          example: https://www.everycheck.com/study/6a60093f-87f5-48b6-b82b-3fe308e26f4e
        checks:
          type: array
          items:
            $ref: '#/components/schemas/Check'
        survey:
          type: number
          description: global survey score
    Check:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: 378fd87e-579d-48e5-b375-8c84eed85618
        type:
          type: string
          enum:
            - identity
            - diploma
            - job
        outcome:
          type: string
          enum:
            - check_confirmed
            - check_rejected
            - check_unconfirmed
            - uncheckable
          description: |
            Enum to represent the status of a check.
            Possible values:
            - `check_confirmed`: No discrepancy has been found.
            - `check_rejected`: A major discrepancy has been found.
            - `check_unconfirmed`: A minor discrepancy has been found.
            - `uncheckable`: We're not able to verify this check.
        link:
          type: string
          format: uri
          example: https://www.everycheck.com/audit/378fd87e-579d-48e5-b375-8c84eed85618
        survey:
          $ref: '#/components/schemas/Survey'
    User:
      type: object
      properties:
        email:
          type: string
          format: email
    Package:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: 6a60093f-87f5-48b6-b82b-3fe308e26f4e
        name:
          type: string
        docs:
          type: array
          properties:
            id: 
              type: string
              enum:
                - identity
                - job
                - diploma
                - other
                - survey
            amount:
              type: integer
            desc:
              type: string
    Survey:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: 6a60093f-87f5-48b6-b82b-3fe308e26f4e
        firstname:
          type: string
        lastname:
          type: string
        score:
          type: number
        comment:
          type: string
          description: comment from the referent
        responses:
          type: array
          items:
            type: object
            properties: 
              question:
                type: string
              value:
                type: string
              attention:
                type: boolean
          example:
            - question: "What is your favorite color?"
              value: "Blue"
            - question: "How old are you?"
              value: "25"
              attention: true
          
security:
  - SSOAuth: [read]
servers:
  - url: https://assessment.everycheck.com/v1
    description: Production server
  - url: https://assessment.everycheck.info/v1
    description: Sandbox server
tags:
  - name: Assessment
    description: Retrieve assessment informations
  - name: Security
  - name: User
paths:
  /assessment:
    post:
      tags:
        - Assessment
      summary: Create an assessment
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                email:
                  type: string
                package:
                  type: string
                  format: uuid
                  description: specify the package for this assessment
                survey:
                  type: string
                  format: uuid
                  description: specify the survey for this assessment
                phone:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                diplomas:
                  type: string
                  description: specify the names of the diplomas to be checked
                jobs:
                  type: string
                  description: sspecify the job names to be checked
              required: 
                - file
                - email
                - package
      responses:
        '201':
          description: A JSON of assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
    get:
      tags:
        - Assessment
      summary: List assessments
      description: Returns a list of assessments starting from a specified date (must be within the past 7 days).
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
            example: 2025-02-06
          description: The start date for listing assessments (must be within the past 7 days).
        - name: 'pageToken'
          in: query
          description: Token for the next page
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of assessments
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    assessments:
                      type: array
                      items:
                        $ref: '#/components/schemas/Assessment'
                    next_page_token:
                      type: string
        '400':
          description: Invalid date parameter
        '401':
          description: Unauthorized
  /assessment/{uuid}/download:
    get:
      tags:
        - Assessment
      summary: Download assessment report
      description: Returns a PDF file for the specified assessment Uuid.
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
            example: 6a60093f-87f5-48b6-b82b-3fe308e26f4e
          description: The uuid of the assessment to download.
      responses:
        '200':
          description: A PDF file of the assessment
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Assessment not found
        '401':
          description: Unauthorized
  /security/user:
    put:
      tags:
        - Security
      summary: Set and replace users allowed to connect
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        '200':
          description: Users list updated
        '401':
          description: Unauthorized
  /user/profile:
    get:
      tags:
        - User
      summary: List available packages and surveys
      description: Returns a list of packages and surveys that can be used to specify assessment rules.
      responses:
        '200':
          description: A list of packages
          content:
           application/json:
              schema:
                  type: object
                  properties:
                    packages:
                      type: array
                      items:
                        $ref: '#/components/schemas/Package'
                    surveys:
                      type: array
                      items:
                        type: object
                        properties:
                          uuid:
                            type: string
                            format: uuid
                            example: 6a60093f-87f5-48b6-b82b-3fe308e26f4e
                          name:
                            type: string
        '401':
          description: Unauthorized
=======
---
swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  version: "1.0.5"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet:
    post:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10
        minimum: 1
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      read:pets: "read your pets"
      write:pets: "modify pets in your account"
definitions:
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          wrapped: true
        items:
          type: "string"
          xml:
            name: "photoUrl"
      tags:
        type: "array"
        xml:
          wrapped: true
        items:
          xml:
            name: "tag"
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
    xml:
      name: "Order"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
>>>>>>> template/master
